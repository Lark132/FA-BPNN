import numpy as np
import pandas as pd
import joblib
import matplotlib.pyplot as plt
from keras.models import load_model
from sklearn.metrics import mean_absolute_error
from tqdm import tqdm

# 1️⃣ 加载归一化器与模型
scaler_X = joblib.load('scaler_X.save')
scaler_y = joblib.load('scaler_y.save')
model = load_model('bpnn_firefly_mae_optimized_ultimate_dis.h5')

# 2️⃣ 读取输入数据
df = pd.read_excel('data.xlsx', header=None)
X = df.iloc[:, 0:11].values
y = df.iloc[:, 11:16].values

# 3️⃣ 数据归一化
X_scaled = scaler_X.transform(X)
y_scaled = scaler_y.transform(y)

# 4️⃣ 定义特征重要性分析（扰动法）
def compute_feature_importance(model, X_scaled, y_scaled, feature_names, output_index, output_label, save_prefix):
    results = []
    print(f'Computing feature importance for {output_label}...')

    y_pred = model.predict(X_scaled)
    baseline_mae = mean_absolute_error(y_scaled[:, output_index], y_pred[:, output_index])
    results.append({'feature': 'BASELINE', 'mae': baseline_mae})

    for k in tqdm(range(X_scaled.shape[1])):
        save_col = X_scaled[:, k].copy()
        np.random.shuffle(X_scaled[:, k])

        y_pred_shuffled = model.predict(X_scaled)
        mae = mean_absolute_error(y_scaled[:, output_index], y_pred_shuffled[:, output_index])
        results.append({'feature': feature_names[k], 'mae': mae})

        X_scaled[:, k] = save_col

    df_result = pd.DataFrame(results).sort_values('mae')

    plt.figure(figsize=(10, 6))
    plt.barh(df_result.feature, df_result.mae)
    plt.title(f'Feature Importance for {output_label}')
    plt.xlabel(f'MAE of {output_label}')
    plt.savefig(f"{save_prefix}_importance.png")
    plt.show()

    df_result.to_csv(f"{save_prefix}_importance.csv", index=False)
    print(df_result)

    return df_result

# 5️⃣ 执行特征重要性分析（针对5个输出指标）
features = ['A', 'd', 'L/d', 'fc', 'fyl', 'fys', 'ρl', 'ρs', 'γl', 'γs', 'n']
output_labels = ['yield_dis', 'yield_load', 'peak_dis', 'peak_load', 'ultimate_dis']

for idx, label in enumerate(output_labels):
    compute_feature_importance(
        model=model,
        X_scaled=X_scaled.copy(),
        y_scaled=y_scaled,
        feature_names=features,
        output_index=idx,
        output_label=label,
        save_prefix=f"feature_{label}"
    )